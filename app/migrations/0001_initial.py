# Generated by Django 5.1.7 on 2025-03-19 14:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "client_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "client_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                (
                    "client_phone",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("location", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=50)),
                ("zip_code", models.CharField(max_length=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("CONFIRMED", "Confirmed"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("NO_SHOW", "No Show"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "is_paid",
                    models.BooleanField(
                        blank=True,
                        help_text="Indicates if the assignment has been paid",
                        null=True,
                    ),
                ),
                (
                    "interpreter_rate",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Taux horaire de l'interpr√®te",
                        max_digits=10,
                    ),
                ),
                ("minimum_hours", models.IntegerField(default=2)),
                (
                    "total_interpreter_payment",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("special_requirements", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Languagee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PayrollDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_logo",
                    models.ImageField(blank=True, upload_to="company_logos/"),
                ),
                ("company_address", models.CharField(blank=True, max_length=255)),
                ("company_phone", models.CharField(blank=True, max_length=20)),
                ("company_email", models.EmailField(blank=True, max_length=254)),
                ("interpreter_name", models.CharField(blank=True, max_length=100)),
                ("interpreter_address", models.CharField(blank=True, max_length=255)),
                ("interpreter_phone", models.CharField(blank=True, max_length=20)),
                ("interpreter_email", models.EmailField(blank=True, max_length=254)),
                ("document_number", models.CharField(max_length=50, unique=True)),
                ("document_date", models.DateField()),
                ("bank_name", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "account_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "routing_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ServiceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("base_rate", models.DecimalField(decimal_places=2, max_digits=10)),
                ("minimum_hours", models.IntegerField(default=1)),
                ("cancellation_policy", models.TextField()),
                ("requires_certification", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("CLIENT", "Client"),
                            ("INTERPRETER", "Interpr√®te"),
                            ("ADMIN", "Administrateur"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("registration_complete", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AssignmentFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assignment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="app.assignment"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action", models.CharField(max_length=50)),
                ("model_name", models.CharField(max_length=50)),
                ("object_id", models.CharField(max_length=50)),
                ("changes", models.JSONField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=100)),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=50)),
                ("zip_code", models.CharField(max_length=20)),
                ("phone", models.CharField(blank=True, max_length=20, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("billing_address", models.TextField(blank=True, null=True)),
                (
                    "billing_city",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "billing_state",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "billing_zip_code",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("tax_id", models.CharField(blank=True, max_length=50, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "credit_limit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "preferred_language",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.language",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContactMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed", models.BooleanField(default=False)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FinancialTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("transaction_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("INCOME", "Income"),
                            ("EXPENSE", "Expense"),
                            ("INTERNAL", "Internal Transfer"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("description", models.TextField()),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Expense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "expense_type",
                    models.CharField(
                        choices=[
                            ("OPERATIONAL", "Operational"),
                            ("ADMINISTRATIVE", "Administrative"),
                            ("MARKETING", "Marketing"),
                            ("SALARY", "Salary"),
                            ("TAX", "Tax"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("PAID", "Paid"),
                            ("REJECTED", "Rejected"),
                        ],
                        max_length=20,
                    ),
                ),
                ("date_incurred", models.DateTimeField()),
                ("date_paid", models.DateTimeField(blank=True, null=True)),
                (
                    "receipt",
                    models.FileField(
                        blank=True, null=True, upload_to="expense_receipts/"
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "transaction",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.financialtransaction",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Interpreter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="interpreter_profiles/"
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=50)),
                ("zip_code", models.CharField(max_length=20)),
                ("certifications", models.JSONField(blank=True, null=True)),
                ("specialties", models.JSONField(blank=True, null=True)),
                ("availability", models.JSONField(blank=True, null=True)),
                ("radius_of_service", models.IntegerField(blank=True, null=True)),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("bank_name", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "account_holder_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "routing_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "account_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "account_type",
                    models.CharField(
                        blank=True,
                        choices=[("checking", "Checking"), ("savings", "Savings")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("background_check_date", models.DateField(blank=True, null=True)),
                ("background_check_status", models.BooleanField(default=False)),
                ("w9_on_file", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interpreter_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="assignment",
            name="interpreter",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="app.interpreter",
            ),
        ),
        migrations.CreateModel(
            name="InterpreterLanguage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "proficiency",
                    models.CharField(
                        choices=[
                            ("NATIVE", "Natif"),
                            ("FLUENT", "Courant"),
                            ("PROFESSIONAL", "Professionnel"),
                            ("INTERMEDIATE", "Interm√©diaire"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_primary", models.BooleanField(default=False)),
                ("certified", models.BooleanField(default=False)),
                ("certification_details", models.TextField(blank=True, null=True)),
                (
                    "interpreter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.interpreter",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="app.language"
                    ),
                ),
            ],
            options={
                "unique_together": {("interpreter", "language")},
            },
        ),
        migrations.AddField(
            model_name="interpreter",
            name="languages",
            field=models.ManyToManyField(
                through="app.InterpreterLanguage", to="app.language"
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="source_language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assignments_source",
                to="app.language",
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="target_language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assignments_target",
                to="app.language",
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("QUOTE_REQUEST", "Quote Request"),
                            ("QUOTE_READY", "Quote Ready"),
                            ("ASSIGNMENT_OFFER", "Assignment Offer"),
                            ("ASSIGNMENT_REMINDER", "Assignment Reminder"),
                            ("PAYMENT_RECEIVED", "Payment Received"),
                            ("SYSTEM", "System"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("read", models.BooleanField(default=False)),
                ("link", models.CharField(blank=True, max_length=200, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email_quote_updates",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications about quote status updates",
                    ),
                ),
                (
                    "email_assignment_updates",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications about assignment updates",
                    ),
                ),
                (
                    "email_payment_updates",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications about payment status",
                    ),
                ),
                (
                    "sms_enabled",
                    models.BooleanField(
                        default=False, help_text="Enable SMS notifications"
                    ),
                ),
                (
                    "quote_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive in-app notifications about quotes",
                    ),
                ),
                (
                    "assignment_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive in-app notifications about assignments",
                    ),
                ),
                (
                    "payment_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive in-app notifications about payments",
                    ),
                ),
                (
                    "system_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive system notifications and updates",
                    ),
                ),
                (
                    "notification_frequency",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate"),
                            ("daily", "Daily Digest"),
                            ("weekly", "Weekly Digest"),
                        ],
                        default="immediate",
                        help_text="How often to receive notifications",
                        max_length=20,
                    ),
                ),
                (
                    "preferred_language",
                    models.ForeignKey(
                        blank=True,
                        help_text="Preferred language for notifications",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.language",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification Preference",
                "verbose_name_plural": "Notification Preferences",
            },
        ),
        migrations.CreateModel(
            name="Deduction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("description", models.CharField(max_length=255)),
                (
                    "deduction_type",
                    models.CharField(
                        choices=[
                            ("ADVANCE", "Payment advance"),
                            ("EQUIPMENT", "Provided equipment"),
                            ("CANCELLATION", "Cancellation penalty"),
                            ("LATE", "Late penalty"),
                            ("TAX", "Tax withholding"),
                            ("CONTRIBUTION", "Social contributions"),
                            ("ADMIN_FEE", "Administrative fees"),
                            ("ADJUSTMENT", "Invoice adjustment"),
                            ("OTHER", "Other deduction"),
                        ],
                        default="OTHER",
                        max_length=50,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "payroll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="deductions",
                        to="app.payrolldocument",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Quote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reference_number", models.CharField(max_length=20, unique=True)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "tax_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("valid_until", models.DateField()),
                ("terms", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SENT", "Sent"),
                            ("ACCEPTED", "Accepted"),
                            ("REJECTED", "Rejected"),
                            ("EXPIRED", "Expired"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("CLIENT_PAYMENT", "Client Payment"),
                            ("INTERPRETER_PAYMENT", "Interpreter Payment"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("payment_method", models.CharField(max_length=50)),
                ("transaction_id", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("payment_date", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="app.assignment"
                    ),
                ),
                (
                    "quote",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.quote",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClientPayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "tax_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("CREDIT_CARD", "Credit Card"),
                            ("DEBIT_CARD", "Debit Card"),
                            ("BANK_TRANSFER", "Bank Transfer"),
                            ("ACH", "ACH"),
                            ("CHECK", "Check"),
                            ("CASH", "Cash"),
                            ("ZELLE", "Zelle"),
                            ("VENMO", "Venmo"),
                            ("CASH_APP", "Cash App"),
                            ("PAYPAL", "PayPal"),
                            ("APPLE_PAY", "Apple Pay"),
                            ("GOOGLE_PAY", "Google Pay"),
                            ("SAMSUNG_PAY", "Samsung Pay"),
                            ("WESTERN_UNION", "Western Union"),
                            ("MONEY_GRAM", "MoneyGram"),
                            ("TAPTP_SEND", "Tap Tap Send"),
                            ("REMITLY", "Remitly"),
                            ("WORLDREMIT", "WorldRemit"),
                            ("XOOM", "Xoom"),
                            ("WISE", "Wise (TransferWise)"),
                            ("STRIPE", "Stripe"),
                            ("SQUARE", "Square"),
                            ("CRYPTO_BTC", "Bitcoin"),
                            ("CRYPTO_ETH", "Ethereum"),
                            ("CRYPTO_USDT", "USDT"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                            ("CANCELLED", "Cancelled"),
                            ("DISPUTED", "Disputed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("payment_date", models.DateTimeField(auto_now_add=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                ("completed_date", models.DateTimeField(blank=True, null=True)),
                ("invoice_number", models.CharField(max_length=50, unique=True)),
                (
                    "payment_proof",
                    models.FileField(
                        blank=True, null=True, upload_to="payment_proofs/"
                    ),
                ),
                (
                    "external_reference",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.assignment",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="app.client"
                    ),
                ),
                (
                    "transaction",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.financialtransaction",
                    ),
                ),
                (
                    "quote",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.quote",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="assignment",
            name="quote",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="app.quote",
            ),
        ),
        migrations.CreateModel(
            name="QuoteRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("requested_date", models.DateTimeField()),
                ("duration", models.IntegerField(help_text="Dur√©e en minutes")),
                ("location", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=50)),
                ("zip_code", models.CharField(max_length=20)),
                ("special_requirements", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("QUOTED", "Quoted"),
                            ("ACCEPTED", "Accepted"),
                            ("REJECTED", "Rejected"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="app.client"
                    ),
                ),
                (
                    "source_language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="quote_requests_source",
                        to="app.language",
                    ),
                ),
                (
                    "target_language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="quote_requests_target",
                        to="app.language",
                    ),
                ),
                (
                    "service_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.servicetype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="quote",
            name="quote_request",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT, to="app.quoterequest"
            ),
        ),
        migrations.CreateModel(
            name="Reimbursement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("description", models.CharField(max_length=255)),
                (
                    "reimbursement_type",
                    models.CharField(
                        choices=[
                            ("TRANSPORT", "Transportation"),
                            ("PARKING", "Parking fees"),
                            ("TOLL", "Toll fees"),
                            ("MEAL", "Meals"),
                            ("ACCOMMODATION", "Accommodation"),
                            ("EQUIPMENT", "Interpretation equipment"),
                            ("TRAINING", "Professional training"),
                            ("COMMUNICATION", "Communication fees"),
                            ("PRINTING", "Document printing"),
                            ("OTHER", "Other reimbursable expense"),
                        ],
                        default="OTHER",
                        max_length=50,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "receipt",
                    models.FileField(blank=True, null=True, upload_to="receipts/"),
                ),
                (
                    "payroll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reimbursements",
                        to="app.payrolldocument",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("client", models.CharField(blank=True, max_length=100)),
                ("source_language", models.CharField(blank=True, max_length=50)),
                ("target_language", models.CharField(blank=True, max_length=50)),
                (
                    "duration",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "payroll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="app.payrolldocument",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PublicQuoteRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("full_name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                ("company_name", models.CharField(max_length=100)),
                ("requested_date", models.DateTimeField()),
                ("duration", models.IntegerField(help_text="Duration in minutes")),
                ("location", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=50)),
                ("zip_code", models.CharField(max_length=20)),
                ("special_requirements", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed", models.BooleanField(default=False)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("admin_notes", models.TextField(blank=True, null=True)),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="public_quotes_source",
                        to="app.language",
                    ),
                ),
                (
                    "target_language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="public_quotes_target",
                        to="app.language",
                    ),
                ),
                (
                    "service_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.servicetype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="assignment",
            name="service_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="app.servicetype"
            ),
        ),
        migrations.CreateModel(
            name="AssignmentNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="app.assignment",
                    ),
                ),
                (
                    "interpreter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_notifications",
                        to="app.interpreter",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["interpreter", "is_read"],
                        name="app_assignm_interpr_0de326_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="app_assignm_created_6849c4_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="InterpreterPayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("CREDIT_CARD", "Credit Card"),
                            ("DEBIT_CARD", "Debit Card"),
                            ("BANK_TRANSFER", "Bank Transfer"),
                            ("ACH", "ACH"),
                            ("CHECK", "Check"),
                            ("CASH", "Cash"),
                            ("ZELLE", "Zelle"),
                            ("VENMO", "Venmo"),
                            ("CASH_APP", "Cash App"),
                            ("PAYPAL", "PayPal"),
                            ("APPLE_PAY", "Apple Pay"),
                            ("GOOGLE_PAY", "Google Pay"),
                            ("SAMSUNG_PAY", "Samsung Pay"),
                            ("WESTERN_UNION", "Western Union"),
                            ("MONEY_GRAM", "MoneyGram"),
                            ("TAPTP_SEND", "Tap Tap Send"),
                            ("REMITLY", "Remitly"),
                            ("WORLDREMIT", "WorldRemit"),
                            ("XOOM", "Xoom"),
                            ("WISE", "Wise (TransferWise)"),
                            ("STRIPE", "Stripe"),
                            ("SQUARE", "Square"),
                            ("CRYPTO_BTC", "Bitcoin"),
                            ("CRYPTO_ETH", "Ethereum"),
                            ("CRYPTO_USDT", "USDT"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("scheduled_date", models.DateTimeField()),
                ("processed_date", models.DateTimeField(blank=True, null=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                ("updated_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("reference_number", models.CharField(max_length=50, unique=True)),
                (
                    "payment_proof",
                    models.FileField(
                        blank=True, null=True, upload_to="interpreter_payment_proofs/"
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.assignment",
                    ),
                ),
                (
                    "interpreter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.interpreter",
                    ),
                ),
                (
                    "transaction",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.financialtransaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Interpreter Payment",
                "verbose_name_plural": "Interpreter Payments",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "scheduled_date"],
                        name="ip_status_scheduled_idx",
                    ),
                    models.Index(
                        fields=["interpreter", "status"],
                        name="ip_interpreter_status_idx",
                    ),
                    models.Index(fields=["created_at"], name="ip_created_at_idx"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["status", "interpreter", "start_time"],
                name="app_assignm_status_986cf9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["created_at"], name="app_assignm_created_0229b7_idx"
            ),
        ),
    ]
